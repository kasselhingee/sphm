// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sphm.h"
#include <RcppEigen.h>
#include <scorematchingad.h>
#include <Rcpp.h>
#include <utils/PrintFor.hpp>
#include <likelihoods/likelihoods.hpp>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Omega_constraints
veca1 Omega_constraints(veca1& vec, int p, int qe);
RcppExport SEXP _sphm_Omega_constraints(SEXP vecSEXP, SEXP pSEXP, SEXP qeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type qe(qeSEXP);
    rcpp_result_gen = Rcpp::wrap(Omega_constraints(vec, p, qe));
    return rcpp_result_gen;
END_RCPP
}
// ull_S2S_alignedG_mean
veca1 ull_S2S_alignedG_mean(veca1& vec, veca1& dyn, vecd& p_in, matd& yx);
RcppExport SEXP _sphm_ull_S2S_alignedG_mean(SEXP vecSEXP, SEXP dynSEXP, SEXP p_inSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< vecd& >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(ull_S2S_alignedG_mean(vec, dyn, p_in, yx));
    return rcpp_result_gen;
END_RCPP
}
// ull_S2S_alignedG_a
veca1 ull_S2S_alignedG_a(veca1& vec, veca1& dyn, vecd& pOmegavecP, matd& yx);
RcppExport SEXP _sphm_ull_S2S_alignedG_a(SEXP vecSEXP, SEXP dynSEXP, SEXP pOmegavecPSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< vecd& >::type pOmegavecP(pOmegavecPSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(ull_S2S_alignedG_a(vec, dyn, pOmegavecP, yx));
    return rcpp_result_gen;
END_RCPP
}
// ull_S2S_alignedG_k
veca1 ull_S2S_alignedG_k(veca1& k, veca1& dyn, vecd& p_in, matd& yx);
RcppExport SEXP _sphm_ull_S2S_alignedG_k(SEXP kSEXP, SEXP dynSEXP, SEXP p_inSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< vecd& >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(ull_S2S_alignedG_k(k, dyn, p_in, yx));
    return rcpp_result_gen;
END_RCPP
}
// alignedGcpp
mata1 alignedGcpp(veca1 m, mata1 P);
RcppExport SEXP _sphm_alignedGcpp(SEXP mSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1 >::type m(mSEXP);
    Rcpp::traits::input_parameter< mata1 >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(alignedGcpp(m, P));
    return rcpp_result_gen;
END_RCPP
}
// cayleyTransform
mata1 cayleyTransform(const mata1& A);
RcppExport SEXP _sphm_cayleyTransform(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cayleyTransform(A));
    return rcpp_result_gen;
END_RCPP
}
// inverseCayleyTransform
mata1 inverseCayleyTransform(const mata1& M);
RcppExport SEXP _sphm_inverseCayleyTransform(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseCayleyTransform(M));
    return rcpp_result_gen;
END_RCPP
}
// vectorizeLowerTriangle
veca1 vectorizeLowerTriangle(const mata1& A);
RcppExport SEXP _sphm_vectorizeLowerTriangle(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(vectorizeLowerTriangle(A));
    return rcpp_result_gen;
END_RCPP
}
// inverseVectorizeLowerTriangle
mata1 inverseVectorizeLowerTriangle(const veca1& vec);
RcppExport SEXP _sphm_inverseVectorizeLowerTriangle(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const veca1& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseVectorizeLowerTriangle(vec));
    return rcpp_result_gen;
END_RCPP
}
// S2S_constV_nota1_tovecparams
veca1 S2S_constV_nota1_tovecparams(veca1& omvec, a1type k, veca1 aremaining, mata1 Kstar);
RcppExport SEXP _sphm_S2S_constV_nota1_tovecparams(SEXP omvecSEXP, SEXP kSEXP, SEXP aremainingSEXP, SEXP KstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type Kstar(KstarSEXP);
    rcpp_result_gen = Rcpp::wrap(S2S_constV_nota1_tovecparams(omvec, k, aremaining, Kstar));
    return rcpp_result_gen;
END_RCPP
}
// S2S_constV_nota1_fromvecparamsR
Rcpp::List S2S_constV_nota1_fromvecparamsR(const veca1& mainvec, int p, int q);
RcppExport SEXP _sphm_S2S_constV_nota1_fromvecparamsR(SEXP mainvecSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const veca1& >::type mainvec(mainvecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(S2S_constV_nota1_fromvecparamsR(mainvec, p, q));
    return rcpp_result_gen;
END_RCPP
}
// ull_S2S_constV_forR
veca1 ull_S2S_constV_forR(mata1 y, mata1 x, veca1 omvec, a1type k, a1type a1, veca1 aremaining, mata1 Kstar);
RcppExport SEXP _sphm_ull_S2S_constV_forR(SEXP ySEXP, SEXP xSEXP, SEXP omvecSEXP, SEXP kSEXP, SEXP a1SEXP, SEXP aremainingSEXP, SEXP KstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< mata1 >::type x(xSEXP);
    Rcpp::traits::input_parameter< veca1 >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type Kstar(KstarSEXP);
    rcpp_result_gen = Rcpp::wrap(ull_S2S_constV_forR(y, x, omvec, k, a1, aremaining, Kstar));
    return rcpp_result_gen;
END_RCPP
}
// tape_ull_S2S_constV_nota1
pADFun tape_ull_S2S_constV_nota1(veca1 omvec, a1type k, a1type a1, veca1 aremaining, mata1 Kstar, vecd& p_in, matd& yx);
RcppExport SEXP _sphm_tape_ull_S2S_constV_nota1(SEXP omvecSEXP, SEXP kSEXP, SEXP a1SEXP, SEXP aremainingSEXP, SEXP KstarSEXP, SEXP p_inSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1 >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type Kstar(KstarSEXP);
    Rcpp::traits::input_parameter< vecd& >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(tape_ull_S2S_constV_nota1(omvec, k, a1, aremaining, Kstar, p_in, yx));
    return rcpp_result_gen;
END_RCPP
}
// mnlink_cpp
mata1 mnlink_cpp(const mata1& xs, const mata1& xe, const veca1& vec, const int p);
RcppExport SEXP _sphm_mnlink_cpp(SEXP xsSEXP, SEXP xeSEXP, SEXP vecSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< const mata1& >::type xe(xeSEXP);
    Rcpp::traits::input_parameter< const veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlink_cpp(xs, xe, vec, p));
    return rcpp_result_gen;
END_RCPP
}
// prelimobj_cpp
veca1 prelimobj_cpp(veca1& omvec, veca1& dyn, vecd& p_in, matd& yx);
RcppExport SEXP _sphm_prelimobj_cpp(SEXP omvecSEXP, SEXP dynSEXP, SEXP p_inSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< vecd& >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(prelimobj_cpp(omvec, dyn, p_in, yx));
    return rcpp_result_gen;
END_RCPP
}
// tape_namedfun
pADFun tape_namedfun(std::string func_name, veca1& ind_t, veca1& dyn_t, vecd& constvec, matd& constmat, bool check_for_nan);
RcppExport SEXP _sphm_tape_namedfun(SEXP func_nameSEXP, SEXP ind_tSEXP, SEXP dyn_tSEXP, SEXP constvecSEXP, SEXP constmatSEXP, SEXP check_for_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type func_name(func_nameSEXP);
    Rcpp::traits::input_parameter< veca1& >::type ind_t(ind_tSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn_t(dyn_tSEXP);
    Rcpp::traits::input_parameter< vecd& >::type constvec(constvecSEXP);
    Rcpp::traits::input_parameter< matd& >::type constmat(constmatSEXP);
    Rcpp::traits::input_parameter< bool >::type check_for_nan(check_for_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(tape_namedfun(func_name, ind_t, dyn_t, constvec, constmat, check_for_nan));
    return rcpp_result_gen;
END_RCPP
}
// besselIasym
a1type besselIasym(const a1type& x, const a1type& nu, int k_max, bool log_result);
RcppExport SEXP _sphm_besselIasym(SEXP xSEXP, SEXP nuSEXP, SEXP k_maxSEXP, SEXP log_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const a1type& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const a1type& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type log_result(log_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(besselIasym(x, nu, k_max, log_result));
    return rcpp_result_gen;
END_RCPP
}
// uldSvMF_cann
veca1 uldSvMF_cann(mata1 y, a1type k, veca1 a, mata1 G);
RcppExport SEXP _sphm_uldSvMF_cann(SEXP ySEXP, SEXP kSEXP, SEXP aSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type a(aSEXP);
    Rcpp::traits::input_parameter< mata1 >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(uldSvMF_cann(y, k, a, G));
    return rcpp_result_gen;
END_RCPP
}
// uldSvMF_muV
veca1 uldSvMF_muV(mata1 y, a1type k, veca1 m, a1type a1, mata1 V);
RcppExport SEXP _sphm_uldSvMF_muV(SEXP ySEXP, SEXP kSEXP, SEXP mSEXP, SEXP a1SEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type m(mSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< mata1 >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(uldSvMF_muV(y, k, m, a1, V));
    return rcpp_result_gen;
END_RCPP
}
// ull_SvMF_V
veca1 ull_SvMF_V(veca1& Vvec, veca1& yk, vecd& a1m);
RcppExport SEXP _sphm_ull_SvMF_V(SEXP VvecSEXP, SEXP ykSEXP, SEXP a1mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type Vvec(VvecSEXP);
    Rcpp::traits::input_parameter< veca1& >::type yk(ykSEXP);
    Rcpp::traits::input_parameter< vecd& >::type a1m(a1mSEXP);
    rcpp_result_gen = Rcpp::wrap(ull_SvMF_V(Vvec, yk, a1m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sphm_Omega_constraints", (DL_FUNC) &_sphm_Omega_constraints, 3},
    {"_sphm_ull_S2S_alignedG_mean", (DL_FUNC) &_sphm_ull_S2S_alignedG_mean, 4},
    {"_sphm_ull_S2S_alignedG_a", (DL_FUNC) &_sphm_ull_S2S_alignedG_a, 4},
    {"_sphm_ull_S2S_alignedG_k", (DL_FUNC) &_sphm_ull_S2S_alignedG_k, 4},
    {"_sphm_alignedGcpp", (DL_FUNC) &_sphm_alignedGcpp, 2},
    {"_sphm_cayleyTransform", (DL_FUNC) &_sphm_cayleyTransform, 1},
    {"_sphm_inverseCayleyTransform", (DL_FUNC) &_sphm_inverseCayleyTransform, 1},
    {"_sphm_vectorizeLowerTriangle", (DL_FUNC) &_sphm_vectorizeLowerTriangle, 1},
    {"_sphm_inverseVectorizeLowerTriangle", (DL_FUNC) &_sphm_inverseVectorizeLowerTriangle, 1},
    {"_sphm_S2S_constV_nota1_tovecparams", (DL_FUNC) &_sphm_S2S_constV_nota1_tovecparams, 4},
    {"_sphm_S2S_constV_nota1_fromvecparamsR", (DL_FUNC) &_sphm_S2S_constV_nota1_fromvecparamsR, 3},
    {"_sphm_ull_S2S_constV_forR", (DL_FUNC) &_sphm_ull_S2S_constV_forR, 7},
    {"_sphm_tape_ull_S2S_constV_nota1", (DL_FUNC) &_sphm_tape_ull_S2S_constV_nota1, 7},
    {"_sphm_mnlink_cpp", (DL_FUNC) &_sphm_mnlink_cpp, 4},
    {"_sphm_prelimobj_cpp", (DL_FUNC) &_sphm_prelimobj_cpp, 4},
    {"_sphm_tape_namedfun", (DL_FUNC) &_sphm_tape_namedfun, 6},
    {"_sphm_besselIasym", (DL_FUNC) &_sphm_besselIasym, 4},
    {"_sphm_uldSvMF_cann", (DL_FUNC) &_sphm_uldSvMF_cann, 4},
    {"_sphm_uldSvMF_muV", (DL_FUNC) &_sphm_uldSvMF_muV, 5},
    {"_sphm_ull_SvMF_V", (DL_FUNC) &_sphm_ull_SvMF_V, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_sphm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
