// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/sphm.h"
#include <RcppEigen.h>
#include <scorematchingad.h>
#include <Rcpp.h>
#include <utils/PrintFor.hpp>
#include <likelihoods/likelihoods.hpp>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Omega_constraints
veca1 Omega_constraints(veca1& vec, int p, int qe);
RcppExport SEXP _sphm_Omega_constraints(SEXP vecSEXP, SEXP pSEXP, SEXP qeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type qe(qeSEXP);
    rcpp_result_gen = Rcpp::wrap(Omega_constraints(vec, p, qe));
    return rcpp_result_gen;
END_RCPP
}
// besselIasym
a1type besselIasym(const a1type& x, const double& nu, int order, bool log_result);
RcppExport SEXP _sphm_besselIasym(SEXP xSEXP, SEXP nuSEXP, SEXP orderSEXP, SEXP log_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const a1type& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type log_result(log_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(besselIasym(x, nu, order, log_result));
    return rcpp_result_gen;
END_RCPP
}
// besselItrunc
a1type besselItrunc(const a1type& x, const double& nu, int order, bool log_result);
RcppExport SEXP _sphm_besselItrunc(SEXP xSEXP, SEXP nuSEXP, SEXP orderSEXP, SEXP log_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const a1type& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type log_result(log_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(besselItrunc(x, nu, order, log_result));
    return rcpp_result_gen;
END_RCPP
}
// lvMFnormconst_approx
a1type lvMFnormconst_approx(a1type kappa, int p);
RcppExport SEXP _sphm_lvMFnormconst_approx(SEXP kappaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< a1type >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lvMFnormconst_approx(kappa, p));
    return rcpp_result_gen;
END_RCPP
}
// ldSvMF_cann
veca1 ldSvMF_cann(mata1 y, a1type k, veca1 a, mata1 G);
RcppExport SEXP _sphm_ldSvMF_cann(SEXP ySEXP, SEXP kSEXP, SEXP aSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type a(aSEXP);
    Rcpp::traits::input_parameter< mata1 >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(ldSvMF_cann(y, k, a, G));
    return rcpp_result_gen;
END_RCPP
}
// ldSvMF_muV
veca1 ldSvMF_muV(mata1 y, a1type k, veca1 m, a1type a1, mata1 V);
RcppExport SEXP _sphm_ldSvMF_muV(SEXP ySEXP, SEXP kSEXP, SEXP mSEXP, SEXP a1SEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type m(mSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< mata1 >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(ldSvMF_muV(y, k, m, a1, V));
    return rcpp_result_gen;
END_RCPP
}
// besselImixed
a1type besselImixed(const a1type& x, const double& nu, double threshold, int order, bool log_result);
RcppExport SEXP _sphm_besselImixed(SEXP xSEXP, SEXP nuSEXP, SEXP thresholdSEXP, SEXP orderSEXP, SEXP log_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const a1type& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type log_result(log_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(besselImixed(x, nu, threshold, order, log_result));
    return rcpp_result_gen;
END_RCPP
}
// mnlink_cpp
mata1 mnlink_cpp(const mata1& xs, const mata1& xe, const veca1& vec, const int p);
RcppExport SEXP _sphm_mnlink_cpp(SEXP xsSEXP, SEXP xeSEXP, SEXP vecSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< const mata1& >::type xe(xeSEXP);
    Rcpp::traits::input_parameter< const veca1& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mnlink_cpp(xs, xe, vec, p));
    return rcpp_result_gen;
END_RCPP
}
// cayleyTransform
mata1 cayleyTransform(const mata1& A);
RcppExport SEXP _sphm_cayleyTransform(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cayleyTransform(A));
    return rcpp_result_gen;
END_RCPP
}
// inverseCayleyTransform
mata1 inverseCayleyTransform(const mata1& M);
RcppExport SEXP _sphm_inverseCayleyTransform(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseCayleyTransform(M));
    return rcpp_result_gen;
END_RCPP
}
// vectorizeLowerTriangle
veca1 vectorizeLowerTriangle(const mata1& A);
RcppExport SEXP _sphm_vectorizeLowerTriangle(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mata1& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(vectorizeLowerTriangle(A));
    return rcpp_result_gen;
END_RCPP
}
// inverseVectorizeLowerTriangle
mata1 inverseVectorizeLowerTriangle(const veca1& vec);
RcppExport SEXP _sphm_inverseVectorizeLowerTriangle(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const veca1& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(inverseVectorizeLowerTriangle(vec));
    return rcpp_result_gen;
END_RCPP
}
// Mobius_SvMF_partan_nota1_tovecparams
veca1 Mobius_SvMF_partan_nota1_tovecparams(veca1& omvec, a1type k, veca1 aremaining, mata1 G0, matd referencecoords, std::string G01behaviour);
RcppExport SEXP _sphm_Mobius_SvMF_partan_nota1_tovecparams(SEXP omvecSEXP, SEXP kSEXP, SEXP aremainingSEXP, SEXP G0SEXP, SEXP referencecoordsSEXP, SEXP G01behaviourSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< matd >::type referencecoords(referencecoordsSEXP);
    Rcpp::traits::input_parameter< std::string >::type G01behaviour(G01behaviourSEXP);
    rcpp_result_gen = Rcpp::wrap(Mobius_SvMF_partan_nota1_tovecparams(omvec, k, aremaining, G0, referencecoords, G01behaviour));
    return rcpp_result_gen;
END_RCPP
}
// Mobius_SvMF_partan_nota1_fromvecparamsR
Rcpp::List Mobius_SvMF_partan_nota1_fromvecparamsR(const veca1& mainvec, int p, int qs, int qe, matd referencecoords, std::string G01behaviour, Rcpp::Nullable<vecd> G01);
RcppExport SEXP _sphm_Mobius_SvMF_partan_nota1_fromvecparamsR(SEXP mainvecSEXP, SEXP pSEXP, SEXP qsSEXP, SEXP qeSEXP, SEXP referencecoordsSEXP, SEXP G01behaviourSEXP, SEXP G01SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const veca1& >::type mainvec(mainvecSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type qs(qsSEXP);
    Rcpp::traits::input_parameter< int >::type qe(qeSEXP);
    Rcpp::traits::input_parameter< matd >::type referencecoords(referencecoordsSEXP);
    Rcpp::traits::input_parameter< std::string >::type G01behaviour(G01behaviourSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<vecd> >::type G01(G01SEXP);
    rcpp_result_gen = Rcpp::wrap(Mobius_SvMF_partan_nota1_fromvecparamsR(mainvec, p, qs, qe, referencecoords, G01behaviour, G01));
    return rcpp_result_gen;
END_RCPP
}
// ld_Mobius_SvMF_partran_forR
veca1 ld_Mobius_SvMF_partran_forR(mata1 y, mata1 xs, mata1 xe, veca1 omvec, a1type k, a1type a1, veca1 aremaining, mata1 G0);
RcppExport SEXP _sphm_ld_Mobius_SvMF_partran_forR(SEXP ySEXP, SEXP xsSEXP, SEXP xeSEXP, SEXP omvecSEXP, SEXP kSEXP, SEXP a1SEXP, SEXP aremainingSEXP, SEXP G0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mata1 >::type y(ySEXP);
    Rcpp::traits::input_parameter< mata1 >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< mata1 >::type xe(xeSEXP);
    Rcpp::traits::input_parameter< veca1 >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type G0(G0SEXP);
    rcpp_result_gen = Rcpp::wrap(ld_Mobius_SvMF_partran_forR(y, xs, xe, omvec, k, a1, aremaining, G0));
    return rcpp_result_gen;
END_RCPP
}
// tape_ld_Mobius_SvMF_partran_nota1
pADFun tape_ld_Mobius_SvMF_partran_nota1(veca1 omvec, a1type k, a1type a1, veca1 aremaining, mata1 G0star, vecd& p_in, vecd& qe_in, matd& yx, matd referencecoords, std::string G01behaviour);
RcppExport SEXP _sphm_tape_ld_Mobius_SvMF_partran_nota1(SEXP omvecSEXP, SEXP kSEXP, SEXP a1SEXP, SEXP aremainingSEXP, SEXP G0starSEXP, SEXP p_inSEXP, SEXP qe_inSEXP, SEXP yxSEXP, SEXP referencecoordsSEXP, SEXP G01behaviourSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1 >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< a1type >::type k(kSEXP);
    Rcpp::traits::input_parameter< a1type >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< veca1 >::type aremaining(aremainingSEXP);
    Rcpp::traits::input_parameter< mata1 >::type G0star(G0starSEXP);
    Rcpp::traits::input_parameter< vecd& >::type p_in(p_inSEXP);
    Rcpp::traits::input_parameter< vecd& >::type qe_in(qe_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    Rcpp::traits::input_parameter< matd >::type referencecoords(referencecoordsSEXP);
    Rcpp::traits::input_parameter< std::string >::type G01behaviour(G01behaviourSEXP);
    rcpp_result_gen = Rcpp::wrap(tape_ld_Mobius_SvMF_partran_nota1(omvec, k, a1, aremaining, G0star, p_in, qe_in, yx, referencecoords, G01behaviour));
    return rcpp_result_gen;
END_RCPP
}
// prelimobj_cpp
veca1 prelimobj_cpp(veca1& omvec, veca1& dyn, vecd& dims_in, matd& yx);
RcppExport SEXP _sphm_prelimobj_cpp(SEXP omvecSEXP, SEXP dynSEXP, SEXP dims_inSEXP, SEXP yxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type omvec(omvecSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn(dynSEXP);
    Rcpp::traits::input_parameter< vecd& >::type dims_in(dims_inSEXP);
    Rcpp::traits::input_parameter< matd& >::type yx(yxSEXP);
    rcpp_result_gen = Rcpp::wrap(prelimobj_cpp(omvec, dyn, dims_in, yx));
    return rcpp_result_gen;
END_RCPP
}
// tape_besselImixed
pADFun tape_besselImixed(veca1& x, const double& nu, double threshold, int order, bool log_result);
RcppExport SEXP _sphm_tape_besselImixed(SEXP xSEXP, SEXP nuSEXP, SEXP thresholdSEXP, SEXP orderSEXP, SEXP log_resultSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< veca1& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type log_result(log_resultSEXP);
    rcpp_result_gen = Rcpp::wrap(tape_besselImixed(x, nu, threshold, order, log_result));
    return rcpp_result_gen;
END_RCPP
}
// tape_namedfun
pADFun tape_namedfun(std::string func_name, veca1& ind_t, veca1& dyn_t, vecd& constvec, matd& constmat, bool check_for_nan);
RcppExport SEXP _sphm_tape_namedfun(SEXP func_nameSEXP, SEXP ind_tSEXP, SEXP dyn_tSEXP, SEXP constvecSEXP, SEXP constmatSEXP, SEXP check_for_nanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type func_name(func_nameSEXP);
    Rcpp::traits::input_parameter< veca1& >::type ind_t(ind_tSEXP);
    Rcpp::traits::input_parameter< veca1& >::type dyn_t(dyn_tSEXP);
    Rcpp::traits::input_parameter< vecd& >::type constvec(constvecSEXP);
    Rcpp::traits::input_parameter< matd& >::type constmat(constmatSEXP);
    Rcpp::traits::input_parameter< bool >::type check_for_nan(check_for_nanSEXP);
    rcpp_result_gen = Rcpp::wrap(tape_namedfun(func_name, ind_t, dyn_t, constvec, constmat, check_for_nan));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sphm_Omega_constraints", (DL_FUNC) &_sphm_Omega_constraints, 3},
    {"_sphm_besselIasym", (DL_FUNC) &_sphm_besselIasym, 4},
    {"_sphm_besselItrunc", (DL_FUNC) &_sphm_besselItrunc, 4},
    {"_sphm_lvMFnormconst_approx", (DL_FUNC) &_sphm_lvMFnormconst_approx, 2},
    {"_sphm_ldSvMF_cann", (DL_FUNC) &_sphm_ldSvMF_cann, 4},
    {"_sphm_ldSvMF_muV", (DL_FUNC) &_sphm_ldSvMF_muV, 5},
    {"_sphm_besselImixed", (DL_FUNC) &_sphm_besselImixed, 5},
    {"_sphm_mnlink_cpp", (DL_FUNC) &_sphm_mnlink_cpp, 4},
    {"_sphm_cayleyTransform", (DL_FUNC) &_sphm_cayleyTransform, 1},
    {"_sphm_inverseCayleyTransform", (DL_FUNC) &_sphm_inverseCayleyTransform, 1},
    {"_sphm_vectorizeLowerTriangle", (DL_FUNC) &_sphm_vectorizeLowerTriangle, 1},
    {"_sphm_inverseVectorizeLowerTriangle", (DL_FUNC) &_sphm_inverseVectorizeLowerTriangle, 1},
    {"_sphm_Mobius_SvMF_partan_nota1_tovecparams", (DL_FUNC) &_sphm_Mobius_SvMF_partan_nota1_tovecparams, 6},
    {"_sphm_Mobius_SvMF_partan_nota1_fromvecparamsR", (DL_FUNC) &_sphm_Mobius_SvMF_partan_nota1_fromvecparamsR, 7},
    {"_sphm_ld_Mobius_SvMF_partran_forR", (DL_FUNC) &_sphm_ld_Mobius_SvMF_partran_forR, 8},
    {"_sphm_tape_ld_Mobius_SvMF_partran_nota1", (DL_FUNC) &_sphm_tape_ld_Mobius_SvMF_partran_nota1, 10},
    {"_sphm_prelimobj_cpp", (DL_FUNC) &_sphm_prelimobj_cpp, 4},
    {"_sphm_tape_besselImixed", (DL_FUNC) &_sphm_tape_besselImixed, 5},
    {"_sphm_tape_namedfun", (DL_FUNC) &_sphm_tape_namedfun, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_sphm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
